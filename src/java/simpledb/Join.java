package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate joinPredicate;

    OpIterator opIterator1, opIterator2;

    Tuple left;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate = p;
        opIterator1 = child1;
        opIterator2 = child2;
        left = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return opIterator1.getTupleDesc().toString();
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        // FIXME: what to return ???
        return opIterator2.getTupleDesc().toString();
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(opIterator1.getTupleDesc(), opIterator2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        opIterator1.open();
        opIterator2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        opIterator1.close();
        opIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        opIterator1.rewind();
        opIterator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple right = null;

        for(;;) {
            if (!opIterator2.hasNext()) {
                opIterator2.rewind();
                if (!opIterator2.hasNext()) {
                    return null;
                }
                if (!opIterator1.hasNext()) {
                    return null;
                }
                left = opIterator1.next();  // left++, reset right
            }
            if (opIterator2.hasNext()) {
                right = opIterator2.next();
            }
            if (left == null && opIterator1.hasNext()) { // first left elem.
                left = opIterator1.next();
            }

            if (left == null || right == null) {
                return null;
            }

            if(joinPredicate.filter(left, right)) {
                TupleDesc desc = this.getTupleDesc();
                Tuple newTuple = new Tuple(desc);
                // newTuple.setRecordId(t.getRecordId());
                for (int i = 0; i < left.getTupleDesc().numFields(); i++) {
                    newTuple.setField(i, left.getField(i));
                }
                for (int i = left.getTupleDesc().numFields(); i < desc.numFields(); i++) {
                    newTuple.setField(i, right.getField(i - left.getTupleDesc().numFields()));
                }
                return newTuple;
            }
        }
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{opIterator1, opIterator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        opIterator1 = children[0];
        opIterator2 = children[1];
    }

}
